/*
 * SerialTask.c
 *
 *  Created on: Nov 15, 2021
 *      Author: Jorlu
 */

#include "SerialTask.h"

SemaphoreHandle_t xSemaphore;
QueueHandle_t xQueue;

extern UART_HandleTypeDef huart1;

void CreateSerialTask(){
	xTaskCreate(serialTaskTx, "serialTaskTx", 256, 1, 1, NULL);
}

void serialTaskTx(void *pArg){
	while(1)
	{
		PUTCHAR_PROTOYPE;
		PUTCHAR_PROTOYPE;
		PUTCHAR_PROTOYPE;
		PUTCHAR_PROTOYPE;
		printf("HOLA");
	}
}

void serialTaskRx(void *pArg){

}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
	xSemaphoreGiveFromISR(xSemaphore, pdFALSE);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){

}

void serialSendByte(char data){
	xSemaphoreTake(xSemaphore, 1);
	HAL_UART_Transmit_IT(&huart1, &data, 1);
}

void serialReceiveByte(){

}

void CreateSerialObjects(){
	xSemaphore = xSemaphoreCreateBinary();
	xSemaphoreGive(xSemaphore);
}

PUTCHAR_PROTOYPE
{
	//while(HAL_OK != HAL_UART_Transmit(&huart1, (uint8_t *) &ch, 1, 30000));
	serialSendByte(ch);
	return ch;
}

GETCHAR_PROTOYPE
{
	uint8_t ch = 0;
	while(HAL_OK != HAL_UART_Receive(&huart1, (uint8_t *) &ch, 1, 30000));
	return ch;
}
